#!/usr/bin/env node

/**
 * Script de diagnostic pour la base de donn√©es BigMatch
 * V√©rifie la connexion PostgreSQL et la configuration Prisma
 */

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

console.log("üîç Diagnostic de la base de donn√©es BigMatch\n");

// V√©rifier les fichiers de configuration
function checkConfigFiles() {
  console.log("üìã V√©rification des fichiers de configuration...");

  const envFiles = [".env", ".env.local", ".env.development"];
  let envFound = false;

  envFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ Fichier ${file} trouv√©`);
      envFound = true;
    }
  });

  if (!envFound) {
    console.log("‚ùå Aucun fichier de configuration d'environnement trouv√©");
    console.log("   Cr√©ez un fichier .env.local avec DATABASE_URL");
    return false;
  }

  return true;
}

// V√©rifier la variable DATABASE_URL
function checkDatabaseUrl() {
  console.log("\nüîó V√©rification de DATABASE_URL...");

  const databaseUrl = process.env.DATABASE_URL;

  if (!databaseUrl) {
    console.log("‚ùå DATABASE_URL non d√©finie");
    console.log(
      '   Ajoutez DATABASE_URL="postgresql://user:password@localhost:5432/database" √† votre .env.local'
    );
    return false;
  }

  console.log(
    `‚úÖ DATABASE_URL d√©finie: ${databaseUrl.replace(/:[^:@]+@/, ":***@")}`
  );
  return true;
}

// V√©rifier si PostgreSQL est en cours d'ex√©cution
function checkPostgres() {
  console.log("\nüêò V√©rification de PostgreSQL...");

  try {
    // Essayer pg_isready si disponible
    execSync("pg_isready -h localhost -p 5432", { stdio: "ignore" });
    console.log("‚úÖ PostgreSQL est accessible sur localhost:5432");
    return true;
  } catch (error) {
    console.log("‚ùå PostgreSQL n'est pas accessible sur localhost:5432");

    // V√©rifier si Docker est utilis√©
    try {
      const containers = execSync(
        'docker ps --format "table {{.Names}}\\t{{.Status}}"',
        { encoding: "utf8" }
      );
      if (containers.includes("postgres")) {
        console.log("üì¶ Conteneur PostgreSQL Docker d√©tect√©");
        return true;
      }
    } catch (dockerError) {
      console.log("   Docker non disponible ou aucun conteneur PostgreSQL");
    }

    console.log("   Solutions possibles :");
    console.log(
      "   - D√©marrer PostgreSQL: brew services start postgresql (macOS)"
    );
    console.log(
      "   - Ou utiliser Docker: docker run --name postgres -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres"
    );
    return false;
  }
}

// V√©rifier Prisma
function checkPrisma() {
  console.log("\n‚ö° V√©rification de Prisma...");

  try {
    // V√©rifier si le client Prisma est g√©n√©r√©
    if (!fs.existsSync("src/generated/prisma")) {
      console.log("‚ùå Client Prisma non g√©n√©r√©");
      console.log("   Ex√©cutez: npx prisma generate");
      return false;
    }

    console.log("‚úÖ Client Prisma g√©n√©r√©");

    // Tester la connexion √† la base de donn√©es
    execSync("npx prisma db pull --schema=prisma/schema.prisma", {
      stdio: "ignore",
    });
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie");

    return true;
  } catch (error) {
    console.log(
      "‚ùå Impossible de se connecter √† la base de donn√©es via Prisma"
    );
    console.log("   Erreur:", error.message.split("\n")[0]);

    console.log("\nüîß Solutions sugg√©r√©es :");
    console.log("   1. V√©rifiez que PostgreSQL fonctionne");
    console.log("   2. V√©rifiez DATABASE_URL dans .env.local");
    console.log("   3. Cr√©ez la base de donn√©es: CREATE DATABASE bigmatch_db;");
    console.log("   4. Appliquez les migrations: npx prisma db push");

    return false;
  }
}

// Suggestions de correction
function showSolutions() {
  console.log("\nüöÄ Configuration rapide recommand√©e:");
  console.log("\n1. Installer PostgreSQL avec Docker:");
  console.log("   docker run --name bigmatch-postgres \\");
  console.log("     -e POSTGRES_PASSWORD=password \\");
  console.log("     -e POSTGRES_DB=bigmatch_db \\");
  console.log("     -p 5432:5432 -d postgres:15");

  console.log("\n2. Cr√©er .env.local:");
  console.log(
    '   DATABASE_URL="postgresql://postgres:password@localhost:5432/bigmatch_db"'
  );
  console.log('   BETTER_AUTH_SECRET="your-32-char-secret-key"');

  console.log("\n3. Configurer Prisma:");
  console.log("   npx prisma generate");
  console.log("   npx prisma db push");

  console.log("\n4. Red√©marrer l'application:");
  console.log("   npm run dev");
}

// Ex√©cution du diagnostic
async function runDiagnostic() {
  const checks = [
    checkConfigFiles(),
    checkDatabaseUrl(),
    checkPostgres(),
    checkPrisma(),
  ];

  const allPassed = checks.every(Boolean);

  console.log("\n" + "=".repeat(50));
  if (allPassed) {
    console.log("üéâ Toutes les v√©rifications sont pass√©es !");
    console.log("   Votre base de donn√©es devrait fonctionner correctement.");
  } else {
    console.log("‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©.");
    showSolutions();
  }
  console.log("=".repeat(50));
}

// V√©rifier si le script est ex√©cut√© directement
if (require.main === module) {
  runDiagnostic().catch(console.error);
}

module.exports = { runDiagnostic };
