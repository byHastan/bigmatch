// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleType {
  ORGANISATEUR
  EQUIPE
  JOUEUR
}

enum EventStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  userRoles     UserRole[]
  Event         Event[]

  @@map("user")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleType  RoleType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleType])
  @@map("user_role")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Event {
  id               String      @id @default(uuid())
  name             String
  description      String?
  type             String // CUP, PLAYOFF, LEAGUE
  date             DateTime
  time             String?
  location         String?
  rules            Json?
  registrationCode String      @unique
  maxTeams         Int?
  maxPlayers       Int?
  status           EventStatus @default(DRAFT)
  isPrivate        Boolean     @default(false) // Indique si l'événement est privé ou public
  organizerId      String
  organizer        User        @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  teams            Team[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("event")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  sport       String?
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  players     Player[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team")
}

model Player {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  position  String?
  number    Int?
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("player")
}
